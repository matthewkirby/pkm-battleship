{"version":3,"sources":["components/board/square.js","components/board/board.js","components/settings/generations.js","components/settings/orientationSwitch.js","components/settings/sidebar.js","components/settings/gameSettings.js","components/colorPicker/colorPicker.js","components/board/game.js","index.js"],"names":["Square","props","position","lookup","id","imageStyle","highlight","style","className","status","onClick","onContextMenu","Board","board","i","key","pkmOrder","push","boardState","gameSettings","highlightMatches","includes","boardNum","event","length","boardStyle","rowLen","GenerationBoxes","useState","genOpen","setGenOpen","genList","Array","keys","supported","elements","map","gen","ListItem","dense","button","disabled","toggleGen","ListItemIcon","Checkbox","edge","checked","includeGens","name","disableRipple","ListItemText","primary","Fragment","Collapse","in","timeout","unmountOnExit","List","OrientationSwitch","Grid","component","container","alignItems","justify","spacing","item","Switch","state","onChange","SideBar","classes","makeStyles","root","width","maxWidth","subheader","textAlign","fontSize","useStyles","ListSubheader","includedGens","Divider","variant","gameOrientation","toggleOrientation","TextField","label","size","defaultValue","JSON","stringify","Button","color","importPkmOrder","exportPkmOrder","resetGame","resetSettings","href","Link","CssTextField","withStyles","borderColor","ControlCenter","anchorState","setAnchorState","toggleDrawer","open","type","theme","offset","mixins","toolbar","AppBar","Toolbar","IconButton","aria-label","Typography","findPkmByName","target","value","SwipeableDrawer","anchor","onClose","onOpen","ColorSwatch","classList","selected","join","ColorPicker","rightClickColor","DEFAULT_STATE","maxRows","Game","setGameSettings","genTable","0","1","val","2","shuffleBoard","setPkmOrder","fill","setBoardState","tempIncludedGens","tmpPkmOrder","concat","tempValue","randomIndex","currentIndex","Math","floor","random","handlePkmClick","newBoardState","slice","curVal","handlePkmContextMenu","preventDefault","_","tempPkmOrder","React","useEffect","savedGameSettings","parse","localStorage","getItem","savedPkmOrder","savedBoardState","setItem","document","getElementById","select","execCommand","newPkmOrder","newIncludedGens","inputString","pkmMatchList","cappedSting","charAt","toUpperCase","nameList","filter","element","startsWith","indexOf","newGameOrientation","ReactDOM","render"],"mappings":"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","file":"static/js/main.dba11d3e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport lookup from 'data/sprite_lookup.json';\n\nfunction Square(props) {\n    const position = lookup[props.id];\n    const xpos = -position['x'] * 50 / 64;\n    const ypos = -position['y'] * 50 / 64;\n    const imageStyle = { \"backgroundPosition\": xpos + 'px ' + ypos + 'px' };\n    \n    const highlight = props.highlight ? \"selection\" : \"\";\n    return (\n        <button\n            style={imageStyle}\n            className={`square ${props.status+\"-bgc\"} ${highlight}`} \n            onClick={props.onClick}\n            onContextMenu={props.onContextMenu}\n        />\n    );\n}\n\nSquare.propTypes = {\n    id: PropTypes.number.isRequired,\n    highlight: PropTypes.bool.isRequired,\n    status: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onContextMenu: PropTypes.func.isRequired\n}\n\nexport default Square;","import PropTypes from 'prop-types';\nimport Square from 'components/board/square.js';\n\nfunction Board(props) {\n    const board = []\n    for(let i=0; i<props.pkmOrder.length; i++) {\n        const key = props.pkmOrder[i] + 1;\n        board.push(\n            <Square\n                id={key}\n                status={props.boardState[i]}\n                highlight={props.gameSettings.highlightMatches.includes(key)}\n                onClick={() => props.onClick(props.boardNum, i)}\n                onContextMenu={event => props.onContextMenu(event, props.boardNum, i)}\n                key={key} \n            />\n        )\n    }\n\n    const boardStyle = { \"gridTemplateColumns\": 'repeat(' + props.gameSettings.rowLen + ', 49px)' };\n    return (\n        <div className=\"game-board\" style={boardStyle}>\n            {board}\n        </div>\n    );\n}\n\nBoard.propTypes = {\n    pkmOrder: PropTypes.arrayOf(PropTypes.number).isRequired,\n    boardState: PropTypes.arrayOf(PropTypes.string).isRequired,\n    boardNum: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onContextMenu: PropTypes.func.isRequired,\n    gameSettings: PropTypes.shape({\n        rowLen: PropTypes.number.isRequired,\n        highlightMatches: PropTypes.array.isRequired\n    })\n}\n\nexport default Board;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { ListItemIcon } from '@material-ui/core';\n\nfunction GenerationBoxes(props) {\n    const [genOpen, setGenOpen] = useState(false);\n\n    const genList = [...Array(8).keys()];\n    const supported = [true,true,true,false,false,false,false,false];    \n    \n    const elements = genList.map((gen) => {\n        return (\n            <ListItem\n                key={gen}\n                dense\n                button\n                disabled={!supported[gen]}\n                onClick={() => props.toggleGen(gen)}\n            >\n                <ListItemIcon>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={props.includeGens[gen]}\n                        name={\"gen\"+(gen+1)}\n                        disableRipple\n                    />\n                </ListItemIcon>\n                <ListItemText primary={`Generation ${gen+1}`} />\n            </ListItem>\n        )\n    });\n\n\n    return (\n        <React.Fragment>\n            <ListItem button onClick={() => setGenOpen(!genOpen)}>\n                <ListItemText primary={\"Generations\"} />\n                {genOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={genOpen} timeout=\"auto\" unmountOnExit>\n                <List>\n                    {elements}\n                </List>\n            </Collapse>\n        </React.Fragment>\n    )\n}\n\nGenerationBoxes.propTypes = {\n    toggleGen: PropTypes.func.isRequired,\n    includeGens: PropTypes.arrayOf(PropTypes.bool).isRequired,\n};\n\nexport default GenerationBoxes;","import PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport ListItemText from '@material-ui/core/ListItemText';\n\n\n\n\nfunction OrientationSwitch(props) {\n    return (\n        <Grid component=\"label\" container alignItems=\"center\" justify=\"center\" spacing={1}>\n            <Grid item><ListItemText primary=\"Vertical\" /></Grid>\n            <Grid item>\n                <Switch\n                    checked={props.state === \"horiz\"}\n                    onChange={() => props.onClick()}\n                    name=\"checkedC\"\n                />\n            </Grid>\n            <Grid item><ListItemText primary=\"Horizontal\" /></Grid>\n        </Grid>\n    );\n}\n\nOrientationSwitch.propTypes = {\n    state: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default OrientationSwitch;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Link from '@material-ui/core/Link';\nimport Divider from '@material-ui/core/Divider';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport GenerationBoxes from 'components/settings/generations.js';\nimport OrientationSwitch from 'components/settings/orientationSwitch.js'\n\nfunction SideBar(props) {\n    const useStyles = makeStyles(() => ({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n        },\n        subheader: {\n            textAlign: 'left',\n            fontSize: \"20px\",\n        }\n    }));\n    const classes = useStyles();\n\n    return (\n        <List\n            subheader={<ListSubheader classes={{root: classes.subheader}}>Options</ListSubheader>}\n            classes={{root: classes.root}}\n        >\n            <GenerationBoxes \n                includeGens={props.gameSettings.includedGens}\n                toggleGen={props.toggleGen}\n            />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <OrientationSwitch\n                    state={props.gameSettings.gameOrientation}\n                    onClick={props.toggleOrientation}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <TextField\n                    variant=\"outlined\"\n                    label=\"Pokemon Sequence String\"\n                    size=\"small\"\n                    defaultValue={JSON.stringify(props.pkmOrder)}\n                    classes={{root: classes.root}}\n                    id=\"sequence-string\"\n                />\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    onClick={props.importPkmOrder}\n                    classes={{root: classes.root}}\n                >Import Pokemon Sequence</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    onClick={props.exportPkmOrder}\n                    classes={{root: classes.root}}\n                >Export Pokemon Sequence</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    onClick={props.resetGame}\n                    classes={{root: classes.root}}\n                >New Game</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    onClick={props.resetSettings}\n                    classes={{root: classes.root}}\n                >Reset Settings</Button>\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <a href=\"https://github.com/matthewkirby/pkm-battleship\"><Link\n                    component=\"button\"\n                    variant=\"h6\"\n                >GitHub</Link></a>\n            </ListItem>\n\n        </List>\n    )\n}\n\nSideBar.propTypes = {\n    toggleGen: PropTypes.func.isRequired,\n    pkmOrder: PropTypes.arrayOf(PropTypes.number).isRequired,\n    importPkmOrder: PropTypes.func.isRequired,\n    exportPkmOrder: PropTypes.func.isRequired,\n    resetGame: PropTypes.func.isRequired,\n    resetSettings: PropTypes.func.isRequired,\n    toggleOrientation: PropTypes.func.isRequired,\n    gameSettings: PropTypes.shape({\n        gameOrientation: PropTypes.string.isRequired,\n        includedGens: PropTypes.arrayOf(PropTypes.bool).isRequired\n    })\n}\n\nexport default SideBar;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport SideBar from 'components/settings/sidebar.js';\n\nconst CssTextField = withStyles({\n    root: {\n        '& .MuiInputBase-root': {\n            color: 'white',\n        },\n        '& label.Mui-focused': {\n            color: 'white',\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderColor: 'white',\n            },\n            '&:hover fieldset': {\n                borderColor: 'white',\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: 'white',\n            },\n        }\n    },\n})(TextField);\n\nfunction ControlCenter(props) {\n    const [anchorState, setAnchorState] = useState(false);\n\n    const toggleDrawer = (open) => (event) => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        setAnchorState(open);\n    };\n\n    // Fix for fixed position toolbar and overlapping elements\n    const classes = makeStyles(theme => ({\n        offset: theme.mixins.toolbar\n    }))\n\n    return (\n        <React.Fragment>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={toggleDrawer(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className=\"flex-grow\">\n                        Pokemon Battleship\n                    </Typography>\n                    <CssTextField\n                        label=\"Search Pokemon\"\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onChange={(event) => props.findPkmByName(event.target.value)}\n                    />\n                    <SwipeableDrawer\n                        anchor=\"left\"\n                        open={anchorState}\n                        onClose={toggleDrawer(false)}\n                        onOpen={toggleDrawer(true)}\n                    >\n                        <SideBar\n                            pkmOrder={props.pkmOrder}\n                            exportPkmOrder={props.exportPkmOrder}\n                            importPkmOrder={props.importPkmOrder}\n                            resetGame={props.resetGame}\n                            resetSettings={props.resetSettings}\n                            toggleGen={props.toggleGen}\n                            toggleOrientation={props.toggleOrientation}\n                            gameSettings={props.gameSettings}\n                        />\n                    </SwipeableDrawer>\n                </Toolbar>\n            </AppBar>\n            <div className={classes().offset} />\n        </React.Fragment>\n    );\n}\n\nControlCenter.propTypes = {\n    findPkmByName: PropTypes.func.isRequired,\n    pkmOrder: PropTypes.arrayOf(PropTypes.number).isRequired,\n    exportPkmOrder: PropTypes.func.isRequired,\n    importPkmOrder: PropTypes.func.isRequired,\n    resetGame: PropTypes.func.isRequired,\n    resetSettings: PropTypes.func.isRequired,\n    toggleGen: PropTypes.func.isRequired,\n    toggleOrientation: PropTypes.func.isRequired,\n    gameSettings: PropTypes.shape({\n        gameOrientation: PropTypes.string.isRequired,\n        includedGens: PropTypes.arrayOf(PropTypes.bool).isRequired\n    })\n}\n\nexport default ControlCenter","import PropTypes from 'prop-types';\nimport 'css/colorPicker.css';\n\nfunction ColorSwatch(props) {\n    const classList = [\"picker-square\", props.color+\"-bgc\"];\n    if(props.selected) { classList.push(\"selected-color\"); }\n    return (\n        <div\n            className={classList.join(\" \")} \n            onClick={props.onClick}\n        />\n    )\n}\n\nColorSwatch.propTypes = {\n    color: PropTypes.string.isRequired,\n    selected: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nfunction ColorPicker(props) {\n    const colorList = [\"r\", \"b\", \"g\", \"y\", \"p\"]\n\n    return (\n        <div className=\"color-picker\">\n            {colorList.map(color => (\n                <ColorSwatch\n                    color={color}\n                    onClick={() => props.onClick(color)}\n                    key={color}\n                    selected={props.rightClickColor===color ? true : false}\n                />\n            ))}\n        </div>\n    );\n}\n\nColorPicker.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    rightClickColor: PropTypes.string.isRequired\n}\n\nexport default ColorPicker;","import React, { useState } from 'react';\nimport 'css/index.css';\nimport 'css/colors.css';\nimport nameList from 'data/names_en.json';\nimport Board from 'components/board/board.js';\nimport ControlCenter from 'components/settings/gameSettings.js';\nimport ColorPicker from 'components/colorPicker/colorPicker.js';\n\nconst DEFAULT_STATE = {\n    rowLen: 14,\n    maxRows: 11,\n    gameOrientation: \"vert\",\n    includedGens: [true, false, false, false, false, false, false, false],\n    highlightMatches: [],\n    rightClickColor: \"r\"\n}\n\nfunction Game() {\n    const [gameSettings, setGameSettings] = useState(DEFAULT_STATE);\n\n    const genTable = {\n        0: [...Array(151).keys()],\n        1: [...Array(100).keys()].map((val) => { return val+151; }),\n        2: [...Array(135).keys()].map((val) => { return val+251; })\n    }\n\n    const [pkmOrder, setPkmOrder] = useState(shuffleBoard(gameSettings.includedGens));\n    // const [boardState, setBoardState] = useState([Array(maxRows*rowLen).fill(\"w\"), Array(maxRows*rowLen).fill(\"w\")]);\n    const [boardState, setBoardState] = useState([Array(pkmOrder.length).fill(\"w\"), Array(pkmOrder.length).fill(\"w\")]);\n\n    function shuffleBoard(tempIncludedGens) {\n        let tmpPkmOrder = [];\n        for(let i=0; i<8; i++) {\n            if(tempIncludedGens[i]) {\n                tmpPkmOrder = tmpPkmOrder.concat(genTable[i])\n            }\n        }\n\n        let currentIndex = tmpPkmOrder.length, tempValue, randomIndex;\n        while (currentIndex !== 0) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            tempValue = tmpPkmOrder[currentIndex];\n            tmpPkmOrder[currentIndex] = tmpPkmOrder[randomIndex];\n            tmpPkmOrder[randomIndex] = tempValue;\n        }\n\n        return tmpPkmOrder\n    }\n\n    // Grab the locally stored values\n    React.useEffect(() => {\n        const savedGameSettings = JSON.parse(localStorage.getItem(\"gameSettings\"));\n        if(savedGameSettings !== null) { setGameSettings(savedGameSettings); }\n        else { setGameSettings(DEFAULT_STATE); }\n        const savedPkmOrder = JSON.parse(localStorage.getItem(\"pkmOrder\"));\n        if(savedPkmOrder !== null) { setPkmOrder(savedPkmOrder); }\n        const savedBoardState = JSON.parse(localStorage.getItem(\"boardState\"));\n        if(savedBoardState !== null) { setBoardState(savedBoardState); }\n    }, []);\n\n    // Save state to localstorage\n    React.useEffect(() => {\n        localStorage.setItem(\"gameSettings\", JSON.stringify(gameSettings));\n        localStorage.setItem(\"pkmOrder\", JSON.stringify(pkmOrder));\n        localStorage.setItem(\"boardState\", JSON.stringify(boardState));\n    }, [gameSettings, pkmOrder, boardState]);\n\n    function handlePkmClick(boardNum, i) {\n        const newBoardState = boardState.slice();\n        const curVal = newBoardState[boardNum][i];\n        newBoardState[boardNum][i] = curVal === \"k\" ? \"w\" : \"k\";\n        setBoardState(newBoardState);\n    }\n\n    function handlePkmContextMenu(event, boardNum, i) {\n        event.preventDefault();\n        const newBoardState = boardState.slice();\n        const curVal = newBoardState[boardNum][i];\n        newBoardState[boardNum][i] = curVal === gameSettings.rightClickColor ? \"w\" : gameSettings.rightClickColor;\n        setBoardState(newBoardState);\n    }\n\n    function resetGame(_, tempIncludedGens=gameSettings.includedGens) {\n        const tempPkmOrder = shuffleBoard(tempIncludedGens);\n        setPkmOrder(tempPkmOrder);\n        // setBoardState([Array(maxRows*rowLen).fill(\"w\"), Array(maxRows*rowLen).fill(\"w\")]);\n        setBoardState([Array(tempPkmOrder.length).fill(\"w\"), Array(tempPkmOrder.length).fill(\"w\")]);\n    }\n\n    const resetSettings = () => {\n        setGameSettings(DEFAULT_STATE);\n        resetGame(null, DEFAULT_STATE.includedGens);\n    }\n\n    function exportPkmOrder() {\n        const textbox = document.getElementById(\"sequence-string\");\n        textbox.select();\n        document.execCommand(\"copy\");\n    }\n\n    function importPkmOrder() {\n        const newPkmOrder = document.getElementById(\"sequence-string\").value;\n        setPkmOrder(JSON.parse(newPkmOrder));\n    }\n\n    function toggleGen(gen) {\n        let newIncludedGens = gameSettings.includedGens.slice()\n        newIncludedGens[gen] = !newIncludedGens[gen];\n        setGameSettings({...gameSettings, includedGens: newIncludedGens});\n    }\n\n    function setRightClickColor(color) {\n        setGameSettings({...gameSettings, rightClickColor: color});\n    }\n\n    function findPkmByName(inputString) {\n        let pkmMatchList = [];\n        if(inputString !== \"\") {\n            const cappedSting = inputString.charAt(0).toUpperCase() + inputString.slice(1);\n            const matchList = nameList.filter(element => element.startsWith(cappedSting));\n            pkmMatchList = matchList.map(name => nameList.indexOf(name)+1);\n        }\n        setGameSettings({...gameSettings, highlightMatches: pkmMatchList});\n    }\n\n    function toggleOrientation() {\n        const newGameOrientation = gameSettings.gameOrientation === \"vert\" ? \"horiz\" : \"vert\";\n        setGameSettings({...gameSettings, gameOrientation: newGameOrientation})\n    }\n\n    return (\n        <React.Fragment>\n            <ControlCenter\n                pkmOrder={pkmOrder}\n                gameSettings={gameSettings}\n                resetGame={resetGame}\n                resetSettings={resetSettings}\n                exportPkmOrder={exportPkmOrder}\n                importPkmOrder={importPkmOrder}\n                toggleGen={toggleGen}\n                findPkmByName={findPkmByName}\n                toggleOrientation={toggleOrientation}\n            />\n            <div className={\"game-\"+gameSettings.gameOrientation}>\n                <Board\n                    boardNum={0}\n                    gameSettings={gameSettings}\n                    pkmOrder={pkmOrder}\n                    boardState={boardState[0]}\n                    onClick={handlePkmClick}\n                    onContextMenu={handlePkmContextMenu}\n                />\n                <Board\n                    boardNum={1}\n                    gameSettings={gameSettings}\n                    pkmOrder={pkmOrder}\n                    boardState={boardState[1]}\n                    onClick={handlePkmClick}\n                    onContextMenu={handlePkmContextMenu}\n                />\n            </div>\n            <ColorPicker\n                rightClickColor={gameSettings.rightClickColor}\n                onClick={setRightClickColor}\n            />\n        </React.Fragment>\n    );\n}\n\nexport default Game;","import ReactDOM from 'react-dom';\nimport Game from 'components/board/game.js'\n  \nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}