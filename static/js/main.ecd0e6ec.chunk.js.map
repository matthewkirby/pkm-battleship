{"version":3,"sources":["gameSettings.js","colorPicker.js","index.js"],"names":["GenerationBoxes","props","useState","genOpen","setGenOpen","genList","Array","keys","supported","elements","map","gen","ListItem","dense","button","disabled","onClick","toggleGen","ListItemIcon","Checkbox","edge","checked","includeGens","name","disableRipple","ListItemText","primary","Fragment","Collapse","in","timeout","unmountOnExit","List","SideBar","classes","makeStyles","theme","root","width","maxWidth","subheader","textAlign","fontSize","useStyles","ListSubheader","includedGens","Divider","variant","TextField","label","size","defaultValue","pkmOrder","id","Button","color","importPkmOrder","exportPkmOrder","resetGame","href","Link","component","CssTextField","withStyles","borderColor","ControlCenter","anchorState","setAnchorState","toggleDrawer","open","event","type","key","offset","mixins","toolbar","AppBar","position","Toolbar","IconButton","aria-label","Typography","className","onChange","findPkmByName","target","value","SwipeableDrawer","anchor","onClose","onOpen","ColorSwatch","classList","selected","push","join","ColorPicker","rightClickColor","Square","lookup","imageStyle","highlight","style","status","onContextMenu","Board","board","i","boardState","highlightMatches","includes","boardNum","length","boardStyle","rowLen","Game","setRowLen","maxRows","setMaxRows","setIncludedGens","genTable","0","1","val","2","shuffleBoard","setPkmOrder","fill","setBoardState","setHighlightMatches","setRightClickColor","tmpPkmOrder","concat","tempValue","randomIndex","currentIndex","Math","floor","random","handlePkmClick","newBoardState","slice","curVal","handlePkmContextMenu","preventDefault","React","useEffect","Number","localStorage","getItem","savedPkmOrder","JSON","parse","savedBoardState","savedIncludedGens","setItem","stringify","document","getElementById","select","execCommand","newPkmOrder","newIncludedGens","inputString","pkmMatchList","cappedSting","charAt","toUpperCase","nameList","filter","element","startsWith","indexOf","ReactDOM","render"],"mappings":"g0jBAwBA,SAASA,EAAgBC,GAAQ,IAAD,EACEC,oBAAS,GADX,mBACrBC,EADqB,KACZC,EADY,KAGtBC,EAAO,YAAOC,MAAM,GAAGC,QACvBC,EAAY,EAAC,GAAK,GAAK,GAAK,GAAM,GAAM,GAAM,GAAM,GAEpDC,EAAWJ,EAAQK,KAAI,SAACC,GAC1B,OACI,eAACC,EAAA,EAAD,CAEIC,OAAK,EACLC,QAAM,EACNC,UAAWP,EAAUG,GACrBK,QAAS,kBAAMf,EAAMgB,UAAUN,IALnC,UAOI,cAACO,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,QAASpB,EAAMqB,YAAYX,GAC3BY,KAAM,OAAOZ,EAAI,GACjBa,eAAa,MAGrB,cAACC,EAAA,EAAD,CAAcC,QAAO,qBAAgBf,EAAI,OAdpCA,MAoBjB,OACI,eAAC,IAAMgB,SAAP,WACI,eAACf,EAAA,EAAD,CAAUE,QAAM,EAACE,QAAS,kBAAMZ,GAAYD,IAA5C,UACI,cAACsB,EAAA,EAAD,CAAcC,QAAS,gBACtBvB,EAAU,cAAC,IAAD,IAAiB,cAAC,IAAD,OAEhC,cAACyB,EAAA,EAAD,CAAUC,GAAI1B,EAAS2B,QAAQ,OAAOC,eAAa,EAAnD,SACI,cAACC,EAAA,EAAD,UACKvB,SAQrB,SAASwB,EAAQhC,GACb,IAUMiC,EAVYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,MAAO,OACPC,SAAU,KAEdC,UAAW,CACPC,UAAW,OACXC,SAAU,WAGFC,GAEhB,OACI,eAACX,EAAA,EAAD,CACIQ,UAAW,cAACI,EAAA,EAAD,CAAeV,QAAS,CAACG,KAAMH,EAAQM,WAAvC,qBACXN,QAAS,CAACG,KAAMH,EAAQG,MAF5B,UAII,cAACrC,EAAD,CACIsB,YAAarB,EAAM4C,aACnB5B,UAAWhB,EAAMgB,YAErB,cAAC6B,EAAA,EAAD,CAASC,QAAQ,WACjB,cAACnC,EAAA,EAAD,UACI,cAACoC,EAAA,EAAD,CACID,QAAQ,WACRE,MAAM,0BACNC,KAAK,QACLC,aAAclD,EAAMmD,SACpBlB,QAAS,CAACG,KAAMH,EAAQG,MACxBgB,GAAG,sBAGX,cAACzC,EAAA,EAAD,UACI,cAAC0C,EAAA,EAAD,CACIP,QAAQ,YACRQ,MAAM,UACNL,KAAK,QACLlC,QAASf,EAAMuD,eACftB,QAAS,CAACG,KAAMH,EAAQG,MAL5B,uCAQJ,cAACzB,EAAA,EAAD,UACI,cAAC0C,EAAA,EAAD,CACIP,QAAQ,YACRQ,MAAM,UACNL,KAAK,QACLlC,QAASf,EAAMwD,eACfvB,QAAS,CAACG,KAAMH,EAAQG,MAL5B,uCAQJ,cAACzB,EAAA,EAAD,UACI,cAAC0C,EAAA,EAAD,CACIP,QAAQ,YACRQ,MAAM,YACNL,KAAK,QACLlC,QAASf,EAAMyD,UACfxB,QAAS,CAACG,KAAMH,EAAQG,MAL5B,wBAQJ,cAACS,EAAA,EAAD,CAASC,QAAQ,WACjB,cAACnC,EAAA,EAAD,UACI,mBAAG+C,KAAK,iDAAR,SAAyD,cAACC,EAAA,EAAD,CACrDC,UAAU,SACVd,QAAQ,KAF6C,2BAWzE,IAAMe,EAAeC,YAAW,CAC5B1B,KAAM,CACF,uBAAwB,CACpBkB,MAAO,SAEX,sBAAuB,CACnBA,MAAO,SAEX,2BAA4B,CACxB,aAAc,CACVS,YAAa,SAEjB,mBAAoB,CAChBA,YAAa,SAEjB,yBAA0B,CACtBA,YAAa,YAhBRD,CAoBlBf,KA6DYiB,MA1Df,SAAuBhE,GAAQ,IAAD,EACYC,oBAAS,GADrB,mBACnBgE,EADmB,KACNC,EADM,KAGpBC,EAAe,SAACC,GAAD,OAAU,SAACC,KACxBA,GAAwB,YAAfA,EAAMC,MAAqC,QAAdD,EAAME,KAA+B,UAAdF,EAAME,MAGvEL,EAAeE,KAIbnC,EAAUC,aAAW,SAAAC,GAAK,MAAK,CACjCqC,OAAQrC,EAAMsC,OAAOC,YAGzB,OACI,eAAC,IAAMhD,SAAP,WACI,cAACiD,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACI3D,KAAK,QACLmC,MAAM,UACNyB,aAAW,OACXhE,QAASoD,GAAa,GAJ1B,SAMI,cAAC,IAAD,MAEJ,cAACa,EAAA,EAAD,CAAYlC,QAAQ,KAAKmC,UAAU,YAAnC,gCAGA,cAACpB,EAAD,CACIb,MAAM,iBACNC,KAAK,QACLH,QAAQ,WACRoC,SAAU,SAACb,GAAD,OAAWrE,EAAMmF,cAAcd,EAAMe,OAAOC,UAE1D,cAACC,EAAA,EAAD,CACIC,OAAO,OACPnB,KAAMH,EACNuB,QAASrB,GAAa,GACtBsB,OAAQtB,GAAa,GAJzB,SAMI,cAACnC,EAAD,CACImB,SAAUnD,EAAMmD,SAChBK,eAAgBxD,EAAMwD,eACtBD,eAAgBvD,EAAMuD,eACtBE,UAAWzD,EAAMyD,UACjBb,aAAc5C,EAAM4C,aACpB5B,UAAWhB,EAAMgB,mBAKjC,qBAAKiE,UAAWhD,IAAUuC,a,MCxNtC,SAASkB,EAAY1F,GACjB,IAAM2F,EAAY,CAAC,gBAAiB3F,EAAMsD,MAAM,QAEhD,OADGtD,EAAM4F,UAAYD,EAAUE,KAAK,kBAEhC,qBACIZ,UAAWU,EAAUG,KAAK,KAC1B/E,QAASf,EAAMe,UAwBZgF,MAlBf,SAAqB/F,GAGjB,OACI,qBAAKiF,UAAU,eAAf,SAHc,CAAC,IAAK,IAAK,IAAK,IAAK,KAIpBxE,KAAI,SAAA6C,GAAK,OAChB,cAACoC,EAAD,CACIpC,MAAOA,EACPvC,QAAS,kBAAMf,EAAMe,QAAQuC,IAE7BsC,SAAU5F,EAAMgG,kBAAkB1C,GAD7BA,SCbzB,SAAS2C,EAAOjG,GACZ,IAAM4E,EAAWsB,EAAOlG,EAAMoD,IAGxB+C,EAAa,CAAE,mBAFS,IAAhBvB,EAAQ,EAAa,GAEe,MADpB,IAAhBA,EAAQ,EAAa,GAC8B,MAE3DwB,EAAYpG,EAAMoG,UAAY,YAAc,GAClD,OACI,wBACIC,MAAOF,EACPlB,UAAS,iBAAYjF,EAAMsG,OAAO,OAAzB,YAAmCF,GAC5CrF,QAASf,EAAMe,QACfwF,cAAevG,EAAMuG,gBAMjC,SAASC,EAAMxG,GAEX,IADA,IAAMyG,EAAQ,GADI,WAEVC,GACJ,IAAMnC,EAAMvE,EAAMmD,SAASuD,GAAK,EAChCD,EAAMZ,KACF,cAACI,EAAD,CACI7C,GAAImB,EACJ+B,OAAQtG,EAAM2G,WAAWD,GACzBN,UAAWpG,EAAM4G,iBAAiBC,SAAStC,GAC3CxD,QAAS,kBAAMf,EAAMe,QAAQf,EAAM8G,SAAUJ,IAC7CH,cAAe,SAAAlC,GAAK,OAAIrE,EAAMuG,cAAclC,EAAOrE,EAAM8G,SAAUJ,KAC9DnC,KATTmC,EAAE,EAAGA,EAAE1G,EAAMmD,SAAS4D,OAAQL,IAAM,EAApCA,GAcR,IAAMM,EAAa,CAAE,oBAAuB,UAAYhH,EAAMiH,OAAS,WACvE,OACI,qBAAKhC,UAAU,aAAaoB,MAAOW,EAAnC,SACKP,IAMb,SAASS,EAAKlH,GAAQ,IAAD,EACWC,mBAAS,IADpB,mBACVgH,EADU,KACFE,EADE,OAEalH,mBAAS,IAFtB,mBAEVmH,EAFU,KAEDC,EAFC,OAGuBpH,mBAAS,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,IAHjF,mBAGV2C,EAHU,KAGI0E,EAHJ,KAIXC,EAAW,CACbC,EAAE,YAAKnH,MAAM,KAAKC,QAClBmH,EAAG,YAAIpH,MAAM,KAAKC,QAAQG,KAAI,SAACiH,GAAU,OAAOA,EAAI,OACpDC,EAAG,YAAItH,MAAM,KAAKC,QAAQG,KAAI,SAACiH,GAAU,OAAOA,EAAI,QAPvC,EAUezH,mBAAS2H,KAVxB,mBAUVzE,EAVU,KAUA0E,EAVA,OAWmB5H,mBAAS,CAACI,MAAM+G,EAAQH,GAAQa,KAAK,KAAMzH,MAAM+G,EAAQH,GAAQa,KAAK,OAXzF,mBAWVnB,EAXU,KAWEoB,EAXF,OAY+B9H,mBAAS,IAZxC,mBAYV2G,EAZU,KAYQoB,EAZR,OAa6B/H,mBAAS,CAAC,MAbvC,mBAaV+F,EAbU,KAaOiC,EAbP,KAejB,SAASL,IAEL,IADA,IAAIM,EAAc,GACVxB,EAAE,EAAGA,EAAE,EAAGA,IACX9D,EAAa8D,KACZwB,EAAcA,EAAYC,OAAOZ,EAASb,KAKlD,IADA,IAAuC0B,EAAWC,EAA9CC,EAAeJ,EAAYnB,OACP,IAAjBuB,GAEHD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAYF,EAHZI,GAAgB,GAIhBJ,EAAYI,GAAgBJ,EAAYG,GACxCH,EAAYG,GAAeD,EAG/B,OAAOF,EA0BX,SAASQ,EAAe5B,EAAUJ,GAC9B,IAAMiC,EAAgBhC,EAAWiC,QAC3BC,EAASF,EAAc7B,GAAUJ,GACvCiC,EAAc7B,GAAUJ,GAAgB,MAAXmC,EAAiB,IAAM,IACpDd,EAAcY,GAGlB,SAASG,EAAqBzE,EAAOyC,EAAUJ,GAC3CrC,EAAM0E,iBACN,IAAMJ,EAAgBhC,EAAWiC,QAC3BC,EAASF,EAAc7B,GAAUJ,GACvCiC,EAAc7B,GAAUJ,GAAKmC,IAAW7C,EAAkB,IAAMA,EAChE+B,EAAcY,GAmClB,OArEAK,IAAMC,WAAU,WACZ9B,EAAU+B,OAAOC,aAAaC,QAAQ,WAAa,KACnD/B,EAAW6B,OAAOC,aAAaC,QAAQ,YAAc,KACrD,IAAMC,EAAgBC,KAAKC,MAAMJ,aAAaC,QAAQ,aACjC,OAAlBC,GAA0BxB,EAAYwB,GACzC,IAAMG,EAAkBF,KAAKC,MAAMJ,aAAaC,QAAQ,eACjC,OAApBI,GAA4BzB,EAAcyB,GAC7C,IAAMC,EAAoBH,KAAKC,MAAMJ,aAAaC,QAAQ,iBACjC,OAAtBK,GAA8BnC,EAAgBmC,GACjDxB,EAAmBkB,aAAaC,QAAQ,oBAAsB,OAC/D,IAGHJ,IAAMC,WAAU,WACZE,aAAaO,QAAQ,SAAUzC,GAC/BkC,aAAaO,QAAQ,UAAWtC,GAChC+B,aAAaO,QAAQ,WAAYJ,KAAKK,UAAUxG,IAChDgG,aAAaO,QAAQ,aAAcJ,KAAKK,UAAUhD,IAClDwC,aAAaO,QAAQ,eAAgBJ,KAAKK,UAAU/G,IACpDuG,aAAaO,QAAQ,kBAAmB1D,KACzC,CAACiB,EAAQG,EAASjE,EAAUwD,EAAY/D,EAAcoD,IAkDrD,eAAC,IAAMtE,SAAP,WACI,cAAC,EAAD,CACIyB,SAAUmG,KAAKK,UAAUxG,GACzBM,UApCZ,WACIoE,EAAYD,KACZG,EAAc,CAAC1H,MAAM+G,EAAQH,GAAQa,KAAK,GAAIzH,MAAM+G,EAAQH,GAAQa,KAAK,MAmCjEtE,eAhCZ,WACoBoG,SAASC,eAAe,mBAChCC,SACRF,SAASG,YAAY,SA8BbxG,eA3BZ,WACI,IAAMyG,EAAcJ,SAASC,eAAe,mBAAmBxE,MAC/DwC,EAAYyB,KAAKC,MAAMS,KA0BfpH,aAAcA,EACd5B,UAxBZ,SAAmBN,GACf,IAAIuJ,EAAkBrH,EAAagG,QACnCqB,EAAgBvJ,IAAQuJ,EAAgBvJ,GACxC4G,EAAgB2C,IAsBR9E,cAnBZ,SAAuB+E,GACnB,IAAIC,EAAe,GACnB,GAAmB,KAAhBD,EAAoB,CACnB,IAAME,EAAcF,EAAYG,OAAO,GAAGC,cAAgBJ,EAAYtB,MAAM,GAE5EuB,EADkBI,EAASC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,WAAWN,MACvC3J,KAAI,SAAAa,GAAI,OAAIiJ,EAASI,QAAQrJ,GAAM,KAEhE0G,EAAoBmC,MAchB,sBAAKlF,UAAU,OAAf,UACI,cAACuB,EAAD,CACIM,SAAU,EACVG,OAAQA,EACR9D,SAAUA,EACVwD,WAAYA,EAAW,GACvBC,iBAAkBA,EAClB7F,QAAS2H,EACTnC,cAAeuC,IAEnB,sBAAM7D,UAAU,cAChB,cAACuB,EAAD,CACIM,SAAU,EACVG,OAAQA,EACR9D,SAAUA,EACVwD,WAAYA,EAAW,GACvBC,iBAAkBA,EAClB7F,QAAS2H,EACTnC,cAAeuC,IAEnB,sBAAM7D,UAAU,cAChB,cAAC,EAAD,CACIe,gBAAiBA,EACjBjF,QAASkH,UAU7B2C,IAASC,OACL,cAAC3D,EAAD,IACA0C,SAASC,eAAe,W","file":"static/js/main.ecd0e6ec.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from '@material-ui/core/Link';\nimport Divider from '@material-ui/core/Divider';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Collapse from '@material-ui/core/Collapse';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { ListItemIcon } from '@material-ui/core';\n\n\nfunction GenerationBoxes(props) {\n    const [genOpen, setGenOpen] = useState(false);\n\n    const genList = [...Array(8).keys()];\n    const supported = [true,true,true,false,false,false,false,false];    \n    \n    const elements = genList.map((gen) => {\n        return (\n            <ListItem\n                key={gen}\n                dense\n                button\n                disabled={!supported[gen]}\n                onClick={() => props.toggleGen(gen)}\n            >\n                <ListItemIcon>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={props.includeGens[gen]}\n                        name={\"gen\"+(gen+1)}\n                        disableRipple\n                    />\n                </ListItemIcon>\n                <ListItemText primary={`Generation ${gen+1}`} />\n            </ListItem>\n        )\n    });\n\n\n    return (\n        <React.Fragment>\n            <ListItem button onClick={() => setGenOpen(!genOpen)}>\n                <ListItemText primary={\"Generations\"} />\n                {genOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={genOpen} timeout=\"auto\" unmountOnExit>\n                <List>\n                    {elements}\n                </List>\n            </Collapse>\n        </React.Fragment>\n    )\n}\n\n\nfunction SideBar(props) {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n        },\n        subheader: {\n            textAlign: 'left',\n            fontSize: \"20px\",\n        }\n    }));\n    const classes = useStyles();\n\n    return (\n        <List\n            subheader={<ListSubheader classes={{root: classes.subheader}}>Options</ListSubheader>}\n            classes={{root: classes.root}}\n        >            \n            <GenerationBoxes \n                includeGens={props.includedGens}\n                toggleGen={props.toggleGen}\n            />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <TextField\n                    variant=\"outlined\"\n                    label=\"Pokemon Sequence String\"\n                    size=\"small\"\n                    defaultValue={props.pkmOrder}\n                    classes={{root: classes.root}}\n                    id=\"sequence-string\"\n                />\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    onClick={props.importPkmOrder}\n                    classes={{root: classes.root}}\n                >Import Pokemon Sequence</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    onClick={props.exportPkmOrder}\n                    classes={{root: classes.root}}\n                >Export Pokemon Sequence</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    onClick={props.resetGame}\n                    classes={{root: classes.root}}\n                >New Game</Button>\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <a href=\"https://github.com/matthewkirby/pkm-battleship\"><Link\n                    component=\"button\"\n                    variant=\"h6\"\n                >GitHub</Link></a>\n            </ListItem>\n\n        </List>\n    )\n}\n\n\nconst CssTextField = withStyles({\n    root: {\n        '& .MuiInputBase-root': {\n            color: 'white',\n        },\n        '& label.Mui-focused': {\n            color: 'white',\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderColor: 'white',\n            },\n            '&:hover fieldset': {\n                borderColor: 'white',\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: 'white',\n            },\n        }\n    },\n})(TextField);\n\n\nfunction ControlCenter(props) {\n    const [anchorState, setAnchorState] = useState(false);\n\n    const toggleDrawer = (open) => (event) => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        setAnchorState(open);\n    };\n\n    // Fix for fixed position toolbar and overlapping elements\n    const classes = makeStyles(theme => ({\n        offset: theme.mixins.toolbar\n    }))\n\n    return (\n        <React.Fragment>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={toggleDrawer(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className=\"flex-grow\">\n                        Pokemon Battleship\n                    </Typography>\n                    <CssTextField\n                        label=\"Search Pokemon\"\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onChange={(event) => props.findPkmByName(event.target.value)}\n                    />\n                    <SwipeableDrawer\n                        anchor=\"left\"\n                        open={anchorState}\n                        onClose={toggleDrawer(false)}\n                        onOpen={toggleDrawer(true)}\n                    >\n                        <SideBar\n                            pkmOrder={props.pkmOrder}\n                            exportPkmOrder={props.exportPkmOrder}\n                            importPkmOrder={props.importPkmOrder}\n                            resetGame={props.resetGame}\n                            includedGens={props.includedGens}\n                            toggleGen={props.toggleGen}\n                        />\n                    </SwipeableDrawer>\n                </Toolbar>\n            </AppBar>\n            <div className={classes().offset} />\n        </React.Fragment>\n    );\n}\n\nexport default ControlCenter","import \"./colorPicker.css\"\n\nfunction ColorSwatch(props) {\n    const classList = [\"picker-square\", props.color+\"-bgc\"];\n    if(props.selected) { classList.push(\"selected-color\"); }\n    return (\n        <div\n            className={classList.join(\" \")} \n            onClick={props.onClick}\n        />\n    )\n}\n\n\nfunction ColorPicker(props) {\n    const colorList = [\"r\", \"b\", \"g\", \"y\", \"p\"]\n\n    return (\n        <div className=\"color-picker\">\n            {colorList.map(color => (\n                <ColorSwatch\n                    color={color}\n                    onClick={() => props.onClick(color)}\n                    key={color}\n                    selected={props.rightClickColor===color ? true : false}\n                />\n            ))}\n        </div>\n    );\n}\n\n\nexport default ColorPicker;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './colors.css'\nimport lookup from './data/sprite_lookup.json'\nimport nameList from './data/names_en.json'\nimport ControlCenter from './gameSettings.js'\nimport ColorPicker from './colorPicker.js'\n\n\nfunction Square(props) {\n    const position = lookup[props.id];\n    const xpos = -position['x'] * 50 / 64;\n    const ypos = -position['y'] * 50 / 64;\n    const imageStyle = { \"backgroundPosition\": xpos + 'px ' + ypos + 'px' };\n    \n    const highlight = props.highlight ? \"selection\" : \"\";\n    return (\n        <button\n            style={imageStyle}\n            className={`square ${props.status+\"-bgc\"} ${highlight}`} \n            onClick={props.onClick}\n            onContextMenu={props.onContextMenu}\n        />\n    );\n}\n\n\nfunction Board(props) {\n    const board = []\n    for(let i=0; i<props.pkmOrder.length; i++) {\n        const key = props.pkmOrder[i] + 1;\n        board.push(\n            <Square\n                id={key}\n                status={props.boardState[i]}\n                highlight={props.highlightMatches.includes(key)}\n                onClick={() => props.onClick(props.boardNum, i)}\n                onContextMenu={event => props.onContextMenu(event, props.boardNum, i)}\n                key={key} \n            />\n        )\n    }\n\n    const boardStyle = { \"gridTemplateColumns\": 'repeat(' + props.rowLen + ', 49px)' };\n    return (\n        <div className=\"game-board\" style={boardStyle}>\n            {board}\n        </div>\n    );\n}\n\n\nfunction Game(props) {\n    const [rowLen, setRowLen] = useState(14);\n    const [maxRows, setMaxRows] = useState(11);\n    const [includedGens, setIncludedGens] = useState([true, false, false, false, false, false, false, false])\n    const genTable = {\n        0: [...Array(151).keys()],\n        1: [...Array(100).keys()].map((val) => { return val+151; }),\n        2: [...Array(135).keys()].map((val) => { return val+251; })\n    }\n\n    const [pkmOrder, setPkmOrder] = useState(shuffleBoard());\n    const [boardState, setBoardState] = useState([Array(maxRows*rowLen).fill(\"w\"), Array(maxRows*rowLen).fill(\"w\")]);\n    const [highlightMatches, setHighlightMatches] = useState([]);\n    const [rightClickColor, setRightClickColor] = useState([\"r\"]);\n\n    function shuffleBoard() {\n        let tmpPkmOrder = [];\n        for(let i=0; i<8; i++) {\n            if(includedGens[i]) {\n                tmpPkmOrder = tmpPkmOrder.concat(genTable[i])\n            }\n        }\n\n        let currentIndex = tmpPkmOrder.length, tempValue, randomIndex;\n        while (currentIndex !== 0) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            tempValue = tmpPkmOrder[currentIndex];\n            tmpPkmOrder[currentIndex] = tmpPkmOrder[randomIndex];\n            tmpPkmOrder[randomIndex] = tempValue;\n        }\n\n        return tmpPkmOrder\n    }\n\n    // Grab the locally stored values\n    React.useEffect(() => {\n        setRowLen(Number(localStorage.getItem(\"rowLen\") || 14));\n        setMaxRows(Number(localStorage.getItem(\"maxRows\") || 11));\n        const savedPkmOrder = JSON.parse(localStorage.getItem(\"pkmOrder\"));\n        if(savedPkmOrder !== null) { setPkmOrder(savedPkmOrder); }\n        const savedBoardState = JSON.parse(localStorage.getItem(\"boardState\"));\n        if(savedBoardState !== null) { setBoardState(savedBoardState); }\n        const savedIncludedGens = JSON.parse(localStorage.getItem(\"includedGens\"));\n        if(savedIncludedGens !== null) { setIncludedGens(savedIncludedGens); }\n        setRightClickColor(localStorage.getItem(\"rightClickColor\") || \"r\")\n    }, []);\n\n    // Save state to localstorage\n    React.useEffect(() => {\n        localStorage.setItem(\"rowLen\", rowLen);\n        localStorage.setItem(\"maxRows\", maxRows);\n        localStorage.setItem(\"pkmOrder\", JSON.stringify(pkmOrder));\n        localStorage.setItem(\"boardState\", JSON.stringify(boardState));\n        localStorage.setItem(\"includedGens\", JSON.stringify(includedGens));\n        localStorage.setItem(\"rightClickColor\", rightClickColor)\n    }, [rowLen, maxRows, pkmOrder, boardState, includedGens, rightClickColor]);\n\n    function handlePkmClick(boardNum, i) {\n        const newBoardState = boardState.slice();\n        const curVal = newBoardState[boardNum][i];\n        newBoardState[boardNum][i] = curVal === \"k\" ? \"w\" : \"k\";\n        setBoardState(newBoardState);\n    }\n\n    function handlePkmContextMenu(event, boardNum, i) {\n        event.preventDefault();\n        const newBoardState = boardState.slice();\n        const curVal = newBoardState[boardNum][i];\n        newBoardState[boardNum][i] = curVal === rightClickColor ? \"w\" : rightClickColor;\n        setBoardState(newBoardState);\n    }\n\n    function resetGame() {\n        setPkmOrder(shuffleBoard());\n        setBoardState([Array(maxRows*rowLen).fill(0), Array(maxRows*rowLen).fill(0)]);\n    }\n\n    function exportPkmOrder() {\n        const textbox = document.getElementById(\"sequence-string\");\n        textbox.select();\n        document.execCommand(\"copy\");\n    }\n\n    function importPkmOrder() {\n        const newPkmOrder = document.getElementById(\"sequence-string\").value;\n        setPkmOrder(JSON.parse(newPkmOrder));\n    }\n\n    function toggleGen(gen) {\n        let newIncludedGens = includedGens.slice()\n        newIncludedGens[gen] = !newIncludedGens[gen];\n        setIncludedGens(newIncludedGens);\n    }\n\n    function findPkmByName(inputString) {\n        let pkmMatchList = [];\n        if(inputString !== \"\") {\n            const cappedSting = inputString.charAt(0).toUpperCase() + inputString.slice(1);\n            const matchList = nameList.filter(element => element.startsWith(cappedSting));\n            pkmMatchList = matchList.map(name => nameList.indexOf(name)+1);\n        }\n        setHighlightMatches(pkmMatchList);\n    }\n\n    return (\n        <React.Fragment>\n            <ControlCenter\n                pkmOrder={JSON.stringify(pkmOrder)}\n                resetGame={resetGame}\n                exportPkmOrder={exportPkmOrder}\n                importPkmOrder={importPkmOrder}\n                includedGens={includedGens}\n                toggleGen={toggleGen}\n                findPkmByName={findPkmByName}\n            />\n            <div className=\"game\">\n                <Board\n                    boardNum={0}\n                    rowLen={rowLen}\n                    pkmOrder={pkmOrder}\n                    boardState={boardState[0]}\n                    highlightMatches={highlightMatches}\n                    onClick={handlePkmClick}\n                    onContextMenu={handlePkmContextMenu}\n                />\n                <span className=\"board-gap\" />\n                <Board\n                    boardNum={1}\n                    rowLen={rowLen}\n                    pkmOrder={pkmOrder}\n                    boardState={boardState[1]}\n                    highlightMatches={highlightMatches}\n                    onClick={handlePkmClick}\n                    onContextMenu={handlePkmContextMenu}\n                />\n                <span className=\"board-gap\" />\n                <ColorPicker\n                    rightClickColor={rightClickColor}\n                    onClick={setRightClickColor}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n\n\n// ========================================\n  \nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}