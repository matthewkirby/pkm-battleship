{"version":3,"sources":["index.js"],"names":["Square","props","position","lookup","id","imageStyle","style","className","0","1","2","status","onClick","onContextMenu","Board","board","i","push","pkmOrder","boardState","boardNum","event","length","boardStyle","rowLen","SideBar","classes","makeStyles","theme","root","width","maxWidth","subheader","textAlign","fontSize","useStyles","variant","label","size","defaultValue","color","importPkmOrder","exportPkmOrder","resetGame","component","ControlCenter","useState","anchorState","setAnchorState","toggleDrawer","open","type","key","offset","mixins","toolbar","Fragment","edge","aria-label","anchor","onClose","onOpen","Game","setRowLen","Math","floor","random","seed","setSeed","npkm","shuffleBoard","setPkmOrder","Array","fill","setBoardState","rng","seedrandom","keys","sort","handleClick","newBoardState","slice","curVal","handleContextMenu","preventDefault","React","useEffect","Number","localStorage","getItem","newSeed","savedPkmOrder","JSON","parse","savedBoardState","setItem","stringify","document","getElementById","select","execCommand","newPkmOrder","value","ReactDOM","render"],"mappings":"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","file":"static/js/main.a7d3ffd2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport seedrandom from \"seedrandom\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport 'fontsource-roboto'\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Link from '@material-ui/core/Link'\nimport Divider from '@material-ui/core/Divider'\n\n\nimport lookup from './data/sprite_lookup.json'\nimport { ListSubheader, SwipeableDrawer } from '@material-ui/core';\nimport { findByLabelText } from '@testing-library/dom';\n\n\nfunction Square(props) {\n    const position = lookup[props.id];\n    const xpos = -position['x'] * 50 / 64;\n    const ypos = -position['y'] * 50 / 64;\n    const imageStyle = { \"backgroundPosition\": xpos + 'px ' + ypos + 'px' };\n    \n    const bgColors = {\"-1\": \"red\", 0: \"white\", 1: \"darkgrey\", 2: \"blue\"};\n    return (\n        <button\n            style={imageStyle}\n            className={`square ${bgColors[props.status]}`} \n            onClick={props.onClick}\n            onContextMenu={props.onContextMenu}\n        />\n    );\n}\n\n\nfunction Board(props) {\n    const board = []\n    for(let i=0; i<props.pkmOrder.length; i++) {\n        board.push(\n            <Square\n                id={props.pkmOrder[i] + 1}\n                status={props.boardState[i]}\n                onClick={() => props.onClick(props.boardNum, i)}\n                onContextMenu={event => props.onContextMenu(event, props.boardNum, i)}\n                key={props.pkmOrder[i] + 1} \n            />\n        )\n    }\n\n    const boardStyle = { \"gridTemplateColumns\": 'repeat(' + props.rowLen + ', 49px)' };\n    return (\n        <div className=\"game-board\" style={boardStyle}>\n            {board}\n        </div>\n    );\n}\n\n\nfunction SideBar(props) {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n        },\n        subheader: {\n            textAlign: 'left',\n            fontSize: \"20px\",\n        }\n    }));\n    const classes = useStyles();\n\n    return (\n        <List\n            subheader={<ListSubheader classes={{root: classes.subheader}}>Options</ListSubheader>}\n            classes={classes.root}\n        >\n            <ListItem>\n                <TextField\n                    variant=\"outlined\"\n                    label=\"Pokemon Sequence String\"\n                    size=\"small\"\n                    defaultValue={props.pkmOrder}\n                    classes={{root: classes.root}}\n                    id=\"sequence-string\"\n                />\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    onClick={props.importPkmOrder}\n                    classes={{root: classes.root}}\n                >Import Pokemon Sequence</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    onClick={props.exportPkmOrder}\n                    classes={{root: classes.root}}\n                >Export Pokemon Sequence</Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    onClick={props.resetGame}\n                    classes={{root: classes.root}}\n                >Reset Game</Button>\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <Link\n                    component=\"button\"\n                    variant=\"h6\"\n                >GitHub</Link>\n            </ListItem>\n\n        </List>\n    )\n}\n\n\nfunction ControlCenter(props) {\n    const [anchorState, setAnchorState] = useState(false);\n\n    const toggleDrawer = (open) => (event) => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        setAnchorState(open);\n    };\n\n    // Fix for fixed position toolbar and overlapping elements\n    const classes = makeStyles(theme => ({\n        offset: theme.mixins.toolbar,\n    }))\n\n    return (\n        <React.Fragment>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={toggleDrawer(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Pokemon Battleship\n                    </Typography>\n                    <SwipeableDrawer\n                        anchor=\"left\"\n                        open={anchorState}\n                        onClose={toggleDrawer(false)}\n                        onOpen={toggleDrawer(true)}\n                    >\n                        <SideBar\n                            pkmOrder={props.pkmOrder}\n                            exportPkmOrder={props.exportPkmOrder}\n                            importPkmOrder={props.importPkmOrder}\n                            resetGame={props.resetGame}\n                        />\n                    </SwipeableDrawer>\n                </Toolbar>\n            </AppBar>\n            <div className={classes().offset} />\n        </React.Fragment>\n    );\n}\n\n\nfunction Game(props) {\n    const [rowLen, setRowLen] = useState(14);\n    const [seed, setSeed] = useState(Math.floor(Math.random()*100000000));\n\n    const npkm = 151;\n    const [pkmOrder, setPkmOrder] = useState(shuffleBoard(npkm, seed));\n    const [boardState, setBoardState] = useState([Array(npkm).fill(0), Array(npkm).fill(0)]);\n\n    function shuffleBoard(npkm, seed) {\n        const rng = seedrandom(seed);\n        let tmpPkmOrder = [...Array(npkm).keys()];\n        return tmpPkmOrder.sort(() => rng() - 0.5);\n    }\n\n    // Grab the locally stored values\n    React.useEffect(() => {\n        setRowLen(Number(localStorage.getItem(\"rowLen\") || 14));\n        const newSeed = Number(localStorage.getItem(\"seed\"));\n        if(newSeed !== null) { setSeed(newSeed); }\n        const savedPkmOrder = JSON.parse(localStorage.getItem(\"pkmOrder\"));\n        if(savedPkmOrder !== null) { setPkmOrder(savedPkmOrder); }\n        const savedBoardState = JSON.parse(localStorage.getItem(\"boardState\"));\n        if(savedBoardState !== null) { setBoardState(savedBoardState); }\n    }, []);\n\n    // Save state to localstorage\n    React.useEffect(() => {\n        localStorage.setItem(\"rowLen\", rowLen);\n        localStorage.setItem(\"seed\", seed);\n        localStorage.setItem(\"pkmOrder\", JSON.stringify(pkmOrder))\n        localStorage.setItem(\"boardState\", JSON.stringify(boardState))\n    }, [rowLen, seed, pkmOrder, boardState]);\n\n    function handleClick(boardNum, i) {\n        const newBoardState = boardState.slice();\n        const curVal = newBoardState[boardNum][i];\n        newBoardState[boardNum][i] = curVal === 2 ? curVal : curVal+1;\n        setBoardState(newBoardState);\n    }\n\n    function handleContextMenu(event, boardNum, i) {\n        event.preventDefault();\n        const newBoardState = boardState.slice();\n        const curVal = newBoardState[boardNum][i];\n        newBoardState[boardNum][i] = curVal === -1 ? curVal : curVal-1;\n        setBoardState(newBoardState);\n    }\n\n    function resetGame() {\n        setSeed(Math.floor(Math.random()*100000000));\n        setPkmOrder(shuffleBoard(npkm, seed));\n        setBoardState([Array(npkm).fill(0), Array(npkm).fill(0)]);\n    }\n\n    function exportPkmOrder() {\n        const textbox = document.getElementById(\"sequence-string\");\n        textbox.select();\n        document.execCommand(\"copy\");\n    }\n\n    function importPkmOrder() {\n        const newPkmOrder = document.getElementById(\"sequence-string\").value;\n        setPkmOrder(JSON.parse(newPkmOrder));\n    }\n\n\n    return (\n        <React.Fragment>\n            <ControlCenter\n                seed={seed}\n                pkmOrder={JSON.stringify(pkmOrder)}\n                resetGame={resetGame}\n                exportPkmOrder={exportPkmOrder}\n                importPkmOrder={importPkmOrder}\n            />\n            <div className=\"game\">\n                <Board\n                    boardNum={0}\n                    rowLen={rowLen}\n                    pkmOrder={pkmOrder}\n                    boardState={boardState[0]}\n                    onClick={handleClick}\n                    onContextMenu={handleContextMenu}\n                />\n                <span className=\"board-gap\" />\n                <Board\n                    boardNum={1}\n                    rowLen={rowLen}\n                    pkmOrder={pkmOrder}\n                    boardState={boardState[1]}\n                    onClick={handleClick}\n                    onContextMenu={handleContextMenu}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n\n\n// ========================================\n  \nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}